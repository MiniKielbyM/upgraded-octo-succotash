import createSdk from '@descope/web-js-sdk';

type SdkConfig = Parameters<typeof createSdk>[0];
type Sdk = ReturnType<typeof createSdk>;
type SdkFlowNext = Sdk['flow']['next'];
type OmitFirstArg<F> = F extends (x: any, ...args: infer P) => infer R ? (...args: P) => R : never;
declare enum Direction {
    backward = "backward",
    forward = "forward"
}
interface LastAuthState {
    loginId?: string;
    name?: string;
}
interface ScreenState {
    errorText?: string;
    errorType?: string;
    form?: Record<string, string>;
    inputs?: Record<string, string>;
    lastAuth?: LastAuthState;
    totp?: {
        image?: string;
        provisionUrl?: string;
    };
}
type FlowState = {
    flowId: string;
    projectId: string;
    baseUrl: string;
    tenant: string;
    stepId: string;
    executionId: string;
    action: string;
    redirectTo: string;
    redirectUrl: string;
    screenId: string;
    screenState: ScreenState;
    token: string;
    code: string;
    exchangeError: string;
    webauthnTransactionId: string;
    webauthnOptions: string;
    telemetryKey: string;
    redirectAuthCodeChallenge: string;
    redirectAuthCallbackUrl: string;
    redirectAuthInitiator: string;
    oidcIdpStateId: string;
    deferredRedirect: boolean;
    locale: string;
};
type StepState = {
    screenState: ScreenState;
    htmlUrl: string;
    htmlLocaleUrl: string;
    next: NextFn;
    direction: Direction | undefined;
};
type NextFn = OmitFirstArg<OmitFirstArg<SdkFlowNext>>;
type FlowStateUpdateFn = (state: FlowState) => void;
type AutoFocusOptions = true | false | 'skipFirstScreen';
type ThemeOptions = 'light' | 'dark' | 'os';
interface ILogger {
    info(title: string, description: string, state: any): void;
    warn(title: string, description?: string): void;
    error(title: string, description?: string, ...optionalParams: any[]): void;
}

declare const createIsChanged: <T extends Record<string, any>>(state: T, prevState: T) => (attrName: keyof T) => boolean;

type StateObject = Record<string, any>;
type SubscribeCb<T> = (state: T, prevState: T, isChanged: ReturnType<typeof createIsChanged>) => void | Promise<void>;
type UpdateStateCb<T> = (state: T) => Partial<T>;
type IsChanged<T> = Parameters<SubscribeCb<T>>[2];
declare class State<T extends StateObject> {
    #private;
    constructor(init?: T, { updateOnlyOnChange }?: {
        updateOnlyOnChange?: boolean;
    });
    get current(): T;
    update: (newState: Partial<T> | UpdateStateCb<T>) => void;
    subscribe(cb: SubscribeCb<T>): string;
    unsubscribe(token: string): boolean;
    unsubscribeAll(): boolean;
}

declare class BaseDescopeWc extends HTMLElement {
    #private;
    logger: ILogger;
    static get observedAttributes(): string[];
    static sdkConfigOverrides: Partial<SdkConfig>;
    loggerWrapper: {
        error: (message: string, description?: string) => void;
        warn: (message: string, description?: string) => void;
        info: (message: string, description?: string, state?: any) => void;
    };
    nextRequestStatus: State<{
        isLoading: boolean;
    }>;
    rootElement: HTMLDivElement;
    sdk: ReturnType<typeof createSdk>;
    constructor(updateExecState: FlowStateUpdateFn);
    get projectId(): string;
    get flowId(): string;
    get baseUrl(): string;
    get tenant(): string;
    get redirectUrl(): string;
    get debug(): boolean;
    get locale(): string;
    get theme(): ThemeOptions;
    get telemetryKey(): string;
    get autoFocus(): AutoFocusOptions;
    get preferBiometrics(): boolean;
    getExecutionContext(): Promise<{
        geo: string;
    }>;
    getFlowConfig(): Promise<any>;
    getTargetLocales(): Promise<any>;
    connectedCallback(): Promise<void>;
    disconnectedCallback(): void;
    attributeChangedCallback(attrName: string, oldValue: string, newValue: string): void;
}

declare class DescopeWc extends BaseDescopeWc {
    #private;
    errorTransformer: ((error: {
        text: string;
        type: string;
    }) => string) | undefined;
    static set sdkConfigOverrides(config: Partial<SdkConfig>);
    flowState: State<FlowState>;
    stepState: State<StepState>;
    constructor();
    connectedCallback(): Promise<void>;
    disconnectedCallback(): void;
    getHtmlFilenameWithLocale(locale: string, screenId: string): Promise<string>;
    getPageContent(htmlUrl: string, htmlLocaleUrl: string): Promise<string>;
    onFlowChange(currentState: FlowState, prevState: FlowState, isChanged: IsChanged<FlowState>): Promise<void>;
    onStepChange(currentState: StepState, prevState: StepState): Promise<void>;
}

export { AutoFocusOptions, ILogger, ThemeOptions, DescopeWc as default };
