{"version":3,"file":"index.cjs.js","sources":["../../lib/constants.ts","../../lib/helpers.ts","../../lib/management/paths.ts","../../lib/management/user.ts","../../lib/management/project.ts","../../lib/management/tenant.ts","../../lib/management/jwt.ts","../../lib/management/permission.ts","../../lib/management/role.ts","../../lib/management/group.ts","../../lib/management/sso.ts","../../lib/management/accesskey.ts","../../lib/management/flow.ts","../../lib/management/theme.ts","../../lib/management/audit.ts","../../lib/fetch-polyfill.ts","../../lib/index.ts","../../lib/management/index.ts"],"sourcesContent":["// eslint-disable-next-line import/prefer-default-export\n/** Refresh JWT cookie name */\nexport const refreshTokenCookieName = 'DSR';\n/** Session JWT cookie name */\nexport const sessionTokenCookieName = 'DS';\n/** The key of the tenants claims in the claims map */\nexport const authorizedTenantsClaimName = 'tenants';\n/** The key of the permissions claims in the claims map either under tenant or top level */\nexport const permissionsClaimName = 'permissions';\n/** The key of the roles claims in the claims map either under tenant or top level */\nexport const rolesClaimName = 'roles';\n","import type { SdkFnWrapper } from '@descope/core-js-sdk';\nimport { authorizedTenantsClaimName, refreshTokenCookieName } from './constants';\nimport { AuthenticationInfo } from './types';\n\n/**\n * Generate a cookie string from given parameters\n * @param name name of the cookie\n * @param value value of cookie that must be already encoded\n * @param options any options to put on the cookie like cookieDomain, cookieMaxAge, cookiePath\n * @returns Cookie string with all options on the string\n */\nconst generateCookie = (name: string, value: string, options?: Record<string, string | number>) =>\n  `${name}=${value}; Domain=${options?.cookieDomain || ''}; Max-Age=${\n    options?.cookieMaxAge || ''\n  }; Path=${options?.cookiePath || '/'}; HttpOnly; SameSite=Strict`;\n\n/**\n * Parse the cookie string and return the value of the cookie\n * @param cookie the raw cookie string\n * @param name the name of the cookie to get value for\n * @returns the value of the given cookie\n */\nconst getCookieValue = (cookie: string | null | undefined, name: string) => {\n  const match = cookie?.match(RegExp(`(?:^|;\\\\s*)${name}=([^;]*)`));\n  return match ? match[1] : null;\n};\n\n// eslint-disable-next-line import/prefer-default-export\n/**\n * Add cookie generation to core-js functions.\n * @param fn the function we are wrapping\n * @returns Wrapped function with cookie generation\n */\nexport const withCookie: SdkFnWrapper<{ refreshJwt?: string; cookies?: string[] }> =\n  (fn) =>\n  async (...args) => {\n    const resp = await fn(...args);\n\n    // istanbul ignore next\n    if (!resp.data) {\n      return resp;\n    }\n\n    // eslint-disable-next-line prefer-const\n    let { refreshJwt, ...rest } = resp.data;\n    const cookies: string[] = [];\n\n    if (!refreshJwt) {\n      if (resp.response?.headers.get('set-cookie')) {\n        refreshJwt = getCookieValue(\n          resp.response?.headers.get('set-cookie'),\n          refreshTokenCookieName,\n        );\n        cookies.push(resp.response?.headers.get('set-cookie')!);\n      }\n    } else {\n      cookies.push(generateCookie(refreshTokenCookieName, refreshJwt, rest));\n    }\n\n    return { ...resp, data: { ...resp.data, refreshJwt, cookies } };\n  };\n\n/**\n * Get the claim (used for permissions or roles) for a given tenant or top level if tenant is empty\n * @param authInfo The parsed authentication info from the JWT\n * @param claim name of the claim\n * @param tenant tenant to retrieve the claim for\n * @returns the claim for the given tenant or top level if tenant is empty\n */\nexport function getAuthorizationClaimItems(\n  authInfo: AuthenticationInfo,\n  claim: string,\n  tenant?: string,\n): string[] {\n  const value = tenant\n    ? authInfo.token[authorizedTenantsClaimName]?.[tenant]?.[claim]\n    : authInfo.token[claim];\n  return Array.isArray(value) ? value : [];\n}\n\n/**\n * Check if the user is associated with the given tenant\n * @param authInfo The parsed authentication info from the JWT\n * @param tenant tenant to check if user is associated with\n * @returns true if user is associated with the tenant\n */\nexport function isUserAssociatedWithTenant(authInfo: AuthenticationInfo, tenant: string): boolean {\n  return !!authInfo.token[authorizedTenantsClaimName]?.[tenant];\n}\n","/** API paths for the Descope service Management APIs */\nexport default {\n  user: {\n    create: '/v1/mgmt/user/create',\n    update: '/v1/mgmt/user/update',\n    delete: '/v1/mgmt/user/delete',\n    deleteAllTestUsers: '/v1/mgmt/user/test/delete/all',\n    load: '/v1/mgmt/user',\n    search: '/v1/mgmt/user/search',\n    getProviderToken: '/v1/mgmt/user/provider/token',\n    updateStatus: '/v1/mgmt/user/update/status',\n    updateLoginId: '/v1/mgmt/user/update/loginid',\n    updateEmail: '/v1/mgmt/user/update/email',\n    updatePhone: '/v1/mgmt/user/update/phone',\n    updateDisplayName: '/v1/mgmt/user/update/name',\n    updatePicture: '/v1/mgmt/user/update/picture',\n    updateCustomAttribute: '/v1/mgmt/user/update/customAttribute',\n    addRole: '/v1/mgmt/user/update/role/add',\n    removeRole: '/v1/mgmt/user/update/role/remove',\n    addTenant: '/v1/mgmt/user/update/tenant/add',\n    removeTenant: '/v1/mgmt/user/update/tenant/remove',\n    setPassword: '/v1/mgmt/user/password/set',\n    expirePassword: '/v1/mgmt/user/password/expire',\n    generateOTPForTest: '/v1/mgmt/tests/generate/otp',\n    generateMagicLinkForTest: '/v1/mgmt/tests/generate/magiclink',\n    generateEnchantedLinkForTest: '/v1/mgmt/tests/generate/enchantedlink',\n    generateEmbeddedLink: '/v1/mgmt/user/signin/embeddedlink',\n  },\n  project: {\n    updateName: '/v1/mgmt/project/update/name',\n  },\n  accessKey: {\n    create: '/v1/mgmt/accesskey/create',\n    load: '/v1/mgmt/accesskey',\n    search: '/v1/mgmt/accesskey/search',\n    update: '/v1/mgmt/accesskey/update',\n    deactivate: '/v1/mgmt/accesskey/deactivate',\n    activate: '/v1/mgmt/accesskey/activate',\n    delete: '/v1/mgmt/accesskey/delete',\n  },\n  tenant: {\n    create: '/v1/mgmt/tenant/create',\n    update: '/v1/mgmt/tenant/update',\n    delete: '/v1/mgmt/tenant/delete',\n    load: '/v1/mgmt/tenant',\n    loadAll: '/v1/mgmt/tenant/all',\n  },\n  sso: {\n    settings: '/v1/mgmt/sso/settings',\n    metadata: '/v1/mgmt/sso/metadata',\n    mapping: '/v1/mgmt/sso/mapping',\n  },\n  jwt: {\n    update: '/v1/mgmt/jwt/update',\n  },\n  permission: {\n    create: '/v1/mgmt/permission/create',\n    update: '/v1/mgmt/permission/update',\n    delete: '/v1/mgmt/permission/delete',\n    loadAll: '/v1/mgmt/permission/all',\n  },\n  role: {\n    create: '/v1/mgmt/role/create',\n    update: '/v1/mgmt/role/update',\n    delete: '/v1/mgmt/role/delete',\n    loadAll: '/v1/mgmt/role/all',\n  },\n  flow: {\n    list: '/v1/mgmt/flow/list',\n    export: '/v1/mgmt/flow/export',\n    import: '/v1/mgmt/flow/import',\n  },\n  theme: {\n    export: '/v1/mgmt/theme/export',\n    import: '/v1/mgmt/theme/import',\n  },\n  group: {\n    loadAllGroups: '/v1/mgmt/group/all',\n    loadAllGroupsForMember: '/v1/mgmt/group/member/all',\n    loadAllGroupMembers: '/v1/mgmt/group/members',\n  },\n  audit: {\n    search: '/v1/mgmt/audit/search',\n  },\n};\n","import { DeliveryMethod, SdkResponse, transformResponse, UserResponse } from '@descope/core-js-sdk';\nimport {\n  ProviderTokenResponse,\n  AssociatedTenant,\n  GenerateEnchantedLinkForTestResponse,\n  GenerateMagicLinkForTestResponse,\n  GenerateOTPForTestResponse,\n  GenerateEmbeddedLinkResponse,\n  AttributesTypes,\n  UserStatus,\n} from './types';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\n\ntype SingleUserResponse = {\n  user: UserResponse;\n};\n\ntype MultipleUsersResponse = {\n  users: UserResponse[];\n};\n\nconst withUser = (sdk: CoreSdk, managementKey?: string) => ({\n  create: (\n    loginId: string,\n    email?: string,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n  ): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.create,\n        {\n          loginId,\n          email,\n          phone,\n          displayName,\n          roleNames: roles,\n          userTenants,\n          customAttributes,\n          picture,\n        },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  /**\n   * Create a new test user.\n   * The loginID is required and will determine what the user will use to sign in.\n   * Make sure the login id is unique for test. All other fields are optional.\n   *\n   * You can later generate OTP, Magic link and enchanted link to use in the test without the need\n   * of 3rd party messaging services.\n   * Those users are not counted as part of the monthly active users\n   * @returns The UserResponse if found, throws otherwise.\n   */\n  createTestUser: (\n    loginId: string,\n    email?: string,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n  ): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.create,\n        {\n          loginId,\n          email,\n          phone,\n          displayName,\n          roleNames: roles,\n          userTenants,\n          test: true,\n          customAttributes,\n          picture,\n        },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  invite: (\n    loginId: string,\n    email?: string,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n  ): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.create,\n        {\n          loginId,\n          email,\n          phone,\n          displayName,\n          roleNames: roles,\n          userTenants,\n          invite: true,\n          customAttributes,\n          picture,\n        },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  update: (\n    loginId: string,\n    email?: string,\n    phone?: string,\n    displayName?: string,\n    roles?: string[],\n    userTenants?: AssociatedTenant[],\n    customAttributes?: Record<string, AttributesTypes>,\n    picture?: string,\n    verifiedEmail?: boolean,\n    verifiedPhone?: boolean,\n  ): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.update,\n        {\n          loginId,\n          email,\n          phone,\n          displayName,\n          roleNames: roles,\n          userTenants,\n          customAttributes,\n          picture,\n          verifiedEmail,\n          verifiedPhone,\n        },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  delete: (loginId: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.user.delete, { loginId }, { token: managementKey }),\n    ),\n  /**\n   * Delete all test users in the project.\n   */\n  deleteAllTestUsers: (): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.delete(apiPaths.user.deleteAllTestUsers, { token: managementKey }),\n    ),\n  load: (loginId: string): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.get(apiPaths.user.load, {\n        queryParams: { loginId },\n        token: managementKey,\n      }),\n      (data) => data.user,\n    ),\n  /**\n   * Load an existing user by user ID. The ID can be found\n   * on the user's JWT.\n   * @param userId load a user by this user ID field\n   * @returns The UserResponse if found, throws otherwise.\n   */\n  loadByUserId: (userId: string): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.get(apiPaths.user.load, {\n        queryParams: { userId },\n        token: managementKey,\n      }),\n      (data) => data.user,\n    ),\n  /**\n   * Search all users. Results can be filtered according to tenants and/or\n   * roles, and also paginated used the limit and page parameters.\n   * @param tenantIds optional list of tenant IDs to filter by\n   * @param roles optional list of roles to filter by\n   * @param limit optionally limit the response, leave out for default limit\n   * @param page optionally paginate over the response\n   * @param testUsersOnly optionally filter only test users\n   * @param withTestUser optionally include test users in search\n   * @returns An array of UserResponse found by the query\n   */\n  searchAll: (\n    tenantIds?: string[],\n    roles?: string[],\n    limit?: number,\n    page?: number,\n    testUsersOnly?: boolean,\n    withTestUser?: boolean,\n    customAttributes?: Record<string, AttributesTypes>,\n    statuses?: UserStatus[],\n  ): Promise<SdkResponse<UserResponse[]>> =>\n    transformResponse<MultipleUsersResponse, UserResponse[]>(\n      sdk.httpClient.post(\n        apiPaths.user.search,\n        {\n          tenantIds,\n          roleNames: roles,\n          limit,\n          page,\n          testUsersOnly,\n          withTestUser,\n          customAttributes,\n          statuses,\n        },\n        { token: managementKey },\n      ),\n      (data) => data.users,\n    ),\n  /**\n   * Get the provider token for the given login ID.\n   * Only users that logged-in using social providers will have token.\n   * Note: The 'Manage tokens from provider' setting must be enabled.\n   * @param loginId the login ID of the user\n   * @param provider the provider name (google, facebook, etc.).\n   * @returns The ProviderTokenResponse of the given user and provider\n   */\n  getProviderToken: (\n    loginId: string,\n    provider: string,\n  ): Promise<SdkResponse<ProviderTokenResponse>> =>\n    transformResponse<ProviderTokenResponse>(\n      sdk.httpClient.get(apiPaths.user.getProviderToken, {\n        queryParams: { loginId, provider },\n        token: managementKey,\n      }),\n      (data) => data,\n    ),\n  activate: (loginId: string): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.updateStatus,\n        { loginId, status: 'enabled' },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  deactivate: (loginId: string): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.updateStatus,\n        { loginId, status: 'disabled' },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  updateLoginId: (loginId: string, newLoginId?: string): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.updateLoginId,\n        { loginId, newLoginId },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  updateEmail: (\n    loginId: string,\n    email: string,\n    isVerified: boolean,\n  ): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.updateEmail,\n        { loginId, email, verified: isVerified },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  updatePhone: (\n    loginId: string,\n    phone: string,\n    isVerified: boolean,\n  ): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.updatePhone,\n        { loginId, phone, verified: isVerified },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  updateDisplayName: (loginId: string, displayName: string): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.updateDisplayName,\n        { loginId, displayName },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  updatePicture: (loginId: string, picture: string): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.updatePicture,\n        { loginId, picture },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  updateCustomAttribute: (\n    loginId: string,\n    attributeKey: string,\n    attributeValue: AttributesTypes,\n  ): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.updateCustomAttribute,\n        { loginId, attributeKey, attributeValue },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  addRoles: (loginId: string, roles: string[]): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.addRole,\n        { loginId, roleNames: roles },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  removeRoles: (loginId: string, roles: string[]): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.removeRole,\n        { loginId, roleNames: roles },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  addTenant: (loginId: string, tenantId: string): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(apiPaths.user.addTenant, { loginId, tenantId }, { token: managementKey }),\n      (data) => data.user,\n    ),\n  removeTenant: (loginId: string, tenantId: string): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.removeTenant,\n        { loginId, tenantId },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  addTenantRoles: (\n    loginId: string,\n    tenantId: string,\n    roles: string[],\n  ): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.addRole,\n        { loginId, tenantId, roleNames: roles },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n  removeTenantRoles: (\n    loginId: string,\n    tenantId: string,\n    roles: string[],\n  ): Promise<SdkResponse<UserResponse>> =>\n    transformResponse<SingleUserResponse, UserResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.removeRole,\n        { loginId, tenantId, roleNames: roles },\n        { token: managementKey },\n      ),\n      (data) => data.user,\n    ),\n\n  /**\n   * Generate OTP for the given login ID of a test user.\n   * Choose the selected delivery method for verification.\n   * Returns the code for the login (exactly as it sent via Email or SMS)\n   * This is useful when running tests and don't want to use 3rd party messaging services\n   *\n   * @param deliveryMethod optional DeliveryMethod\n   * @param loginId login ID of a test user\n   * @returns GenerateOTPForTestResponse which includes the loginId and the OTP code\n   */\n  generateOTPForTestUser: (\n    deliveryMethod: DeliveryMethod,\n    loginId: string,\n  ): Promise<SdkResponse<GenerateOTPForTestResponse>> =>\n    transformResponse<GenerateOTPForTestResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.generateOTPForTest,\n        { deliveryMethod, loginId },\n        { token: managementKey },\n      ),\n      (data) => data,\n    ),\n\n  /**\n   * Generate Magic Link for the given login ID of a test user.\n   * Choose the selected delivery method for verification.\n   * It returns the link for the login (exactly as it sent via Email)\n   * This is useful when running tests and don't want to use 3rd party messaging services\n   *\n   * @param deliveryMethod optional DeliveryMethod\n   * @param loginId login ID of a test user\n   * @param uri optional redirect uri which will be used instead of any global configuration.\n   * @returns GenerateMagicLinkForTestResponse which includes the loginId and the magic link\n   */\n  generateMagicLinkForTestUser: (\n    deliveryMethod: DeliveryMethod,\n    loginId: string,\n    uri: string,\n  ): Promise<SdkResponse<GenerateMagicLinkForTestResponse>> =>\n    transformResponse<GenerateMagicLinkForTestResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.generateMagicLinkForTest,\n        { deliveryMethod, loginId, URI: uri },\n        { token: managementKey },\n      ),\n      (data) => data,\n    ),\n\n  /**\n   * Generate Enchanted Link for the given login ID of a test user.\n   * It returns the link for the login (exactly as it sent via Email)\n   * and pendingRef which is used to poll for a valid session\n   * This is useful when running tests and don't want to use 3rd party messaging services\n   *\n   * @param loginId login ID of a test user\n   * @param uri optional redirect uri which will be used instead of any global configuration.\n   * @returns GenerateEnchantedLinkForTestResponse which includes the loginId, the enchanted link and the pendingRef\n   */\n  generateEnchantedLinkForTestUser: (\n    loginId: string,\n    uri: string,\n  ): Promise<SdkResponse<GenerateEnchantedLinkForTestResponse>> =>\n    transformResponse<GenerateEnchantedLinkForTestResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.generateEnchantedLinkForTest,\n        { loginId, URI: uri },\n        { token: managementKey },\n      ),\n      (data) => data,\n    ),\n\n  generateEmbeddedLink: (\n    loginId: string,\n    customClaims?: Record<string, any>,\n  ): Promise<SdkResponse<GenerateEmbeddedLinkResponse>> =>\n    transformResponse<GenerateEmbeddedLinkResponse>(\n      sdk.httpClient.post(\n        apiPaths.user.generateEmbeddedLink,\n        { loginId, customClaims },\n        { token: managementKey },\n      ),\n      (data) => data,\n    ),\n\n  /**\n   * Set password for the given login ID of user.\n   * Note: The password will automatically be set as expired.\n   * The user will not be able to log-in with this password, and will be required to replace it on next login.\n   * See also: expirePassword\n   * @param loginId login ID of a test user\n   * @param password The password to set for the user\n   */\n  setPassword: (loginId: string, password: string): Promise<SdkResponse<never>> =>\n    transformResponse<never>(\n      sdk.httpClient.post(\n        apiPaths.user.setPassword,\n        { loginId, password },\n        { token: managementKey },\n      ),\n      (data) => data,\n    ),\n\n  /**\n   * Expire password for the given login ID.\n   * Note: user sign-in with an expired password, the user will get an error with code.\n   * Use the `ResetPassword` or `ReplacePassword` methods to reset/replace the password.\n   * @param loginId login ID of a test user\n   */\n  expirePassword: (loginId: string): Promise<SdkResponse<never>> =>\n    transformResponse<never>(\n      sdk.httpClient.post(apiPaths.user.expirePassword, { loginId }, { token: managementKey }),\n      (data) => data,\n    ),\n});\n\nexport default withUser;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\n\nconst withProject = (sdk: CoreSdk, managementKey?: string) => ({\n  /**\n   * Update the current project name.\n   */\n  updateName: (name: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.project.updateName,\n        {\n          name,\n        },\n        { token: managementKey },\n      ),\n    ),\n});\n\nexport default withProject;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { CreateTenantResponse, Tenant } from './types';\n\ntype MultipleTenantResponse = {\n  tenants: Tenant[];\n};\n\nconst withTenant = (sdk: CoreSdk, managementKey?: string) => ({\n  create: (\n    name: string,\n    selfProvisioningDomains?: string[],\n  ): Promise<SdkResponse<CreateTenantResponse>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.tenant.create,\n        { name, selfProvisioningDomains },\n        { token: managementKey },\n      ),\n    ),\n  createWithId: (\n    id: string,\n    name: string,\n    selfProvisioningDomains?: string[],\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.tenant.create,\n        { id, name, selfProvisioningDomains },\n        { token: managementKey },\n      ),\n    ),\n  update: (\n    id: string,\n    name: string,\n    selfProvisioningDomains?: string[],\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.tenant.update,\n        { id, name, selfProvisioningDomains },\n        { token: managementKey },\n      ),\n    ),\n  delete: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.tenant.delete, { id }, { token: managementKey }),\n    ),\n  load: (id: string): Promise<SdkResponse<Tenant>> =>\n    transformResponse<Tenant, Tenant>(\n      sdk.httpClient.get(apiPaths.tenant.load, {\n        queryParams: { id },\n        token: managementKey,\n      }),\n      (data) => data,\n    ),\n  loadAll: (): Promise<SdkResponse<Tenant[]>> =>\n    transformResponse<MultipleTenantResponse, Tenant[]>(\n      sdk.httpClient.get(apiPaths.tenant.loadAll, {\n        token: managementKey,\n      }),\n      (data) => data.tenants,\n    ),\n});\n\nexport default withTenant;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { UpdateJWTResponse } from './types';\n\nconst withJWT = (sdk: CoreSdk, managementKey?: string) => ({\n  update: (\n    jwt: string,\n    customClaims?: Record<string, any>,\n  ): Promise<SdkResponse<UpdateJWTResponse>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.jwt.update, { jwt, customClaims }, { token: managementKey }),\n    ),\n});\n\nexport default withJWT;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { Permission } from './types';\n\ntype MultiplePermissionResponse = {\n  permissions: Permission[];\n};\n\nconst withPermission = (sdk: CoreSdk, managementKey?: string) => ({\n  create: (name: string, description?: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.permission.create,\n        { name, description },\n        { token: managementKey },\n      ),\n    ),\n  update: (name: string, newName: string, description?: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.permission.update,\n        { name, newName, description },\n        { token: managementKey },\n      ),\n    ),\n  delete: (name: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.permission.delete, { name }, { token: managementKey }),\n    ),\n  loadAll: (): Promise<SdkResponse<Permission[]>> =>\n    transformResponse<MultiplePermissionResponse, Permission[]>(\n      sdk.httpClient.get(apiPaths.permission.loadAll, {\n        token: managementKey,\n      }),\n      (data) => data.permissions,\n    ),\n});\n\nexport default withPermission;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { Role } from './types';\n\ntype MultipleRoleResponse = {\n  roles: Role[];\n};\n\nconst withRole = (sdk: CoreSdk, managementKey?: string) => ({\n  create: (\n    name: string,\n    description?: string,\n    permissionNames?: string[],\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.role.create,\n        { name, description, permissionNames },\n        { token: managementKey },\n      ),\n    ),\n  update: (\n    name: string,\n    newName: string,\n    description?: string,\n    permissionNames?: string[],\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.role.update,\n        { name, newName, description, permissionNames },\n        { token: managementKey },\n      ),\n    ),\n  delete: (name: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.role.delete, { name }, { token: managementKey }),\n    ),\n  loadAll: (): Promise<SdkResponse<Role[]>> =>\n    transformResponse<MultipleRoleResponse, Role[]>(\n      sdk.httpClient.get(apiPaths.role.loadAll, {\n        token: managementKey,\n      }),\n      (data) => data.roles,\n    ),\n});\n\nexport default withRole;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { Group } from './types';\n\nconst withGroup = (sdk: CoreSdk, managementKey?: string) => ({\n  /**\n   * Load all groups for a specific tenant id.\n   * @param tenantId Tenant ID to load groups from.\n   * @returns Group[] list of groups\n   */\n  loadAllGroups: (tenantId: string): Promise<SdkResponse<Group[]>> =>\n    transformResponse<Group[]>(\n      sdk.httpClient.post(apiPaths.group.loadAllGroups, { tenantId }, { token: managementKey }),\n    ),\n\n  /**\n   * Load all groups for the provided user IDs or login IDs.\n   * @param tenantId Tenant ID to load groups from.\n   * @param userIds Optional List of user IDs, with the format of \"U2J5ES9S8TkvCgOvcrkpzUgVTEBM\" (example), which can be found on the user's JWT.\n   * @param loginIds Optional List of login IDs, how the user identifies when logging in.\n   * @returns Group[] list of groups\n   */\n  loadAllGroupsForMember: (\n    tenantId: string,\n    userIds: string[],\n    loginIds: string[],\n  ): Promise<SdkResponse<Group[]>> =>\n    transformResponse<Group[]>(\n      sdk.httpClient.post(\n        apiPaths.group.loadAllGroupsForMember,\n        { tenantId, loginIds, userIds },\n        { token: managementKey },\n      ),\n    ),\n\n  /**\n   * Load all members of the provided group id.\n   * @param tenantId Tenant ID to load groups from.\n   * @param groupId Group ID to load members for.\n   * @returns Group[] list of groups\n   */\n  loadAllGroupMembers: (tenantId: string, groupId: string): Promise<SdkResponse<Group[]>> =>\n    transformResponse<Group[]>(\n      sdk.httpClient.post(\n        apiPaths.group.loadAllGroupMembers,\n        { tenantId, groupId },\n        { token: managementKey },\n      ),\n    ),\n});\n\nexport default withGroup;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { RoleMappings, AttributeMapping, SSOSettingsResponse } from './types';\n\nconst withSSOSettings = (sdk: CoreSdk, managementKey?: string) => ({\n  getSettings: (tenantId: string): Promise<SdkResponse<SSOSettingsResponse>> =>\n    transformResponse<SSOSettingsResponse>(\n      sdk.httpClient.get(apiPaths.sso.settings, {\n        queryParams: { tenantId },\n        token: managementKey,\n      }),\n      (data) => data,\n    ),\n  deleteSettings: (tenantId: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.delete(apiPaths.sso.settings, {\n        queryParams: { tenantId },\n        token: managementKey,\n      }),\n    ),\n  configureSettings: (\n    tenantId: string,\n    idpURL: string,\n    idpCert: string,\n    entityId: string,\n    redirectURL: string,\n    domain: string,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.sso.settings,\n        { tenantId, idpURL, entityId, idpCert, redirectURL, domain },\n        { token: managementKey },\n      ),\n    ),\n  configureMetadata: (\n    tenantId: string,\n    idpMetadataURL: string,\n    redirectURL: string,\n    domain: string,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.sso.metadata,\n        { tenantId, idpMetadataURL, redirectURL, domain },\n        { token: managementKey },\n      ),\n    ),\n  configureMapping: (\n    tenantId: string,\n    roleMappings?: RoleMappings,\n    attributeMapping?: AttributeMapping,\n  ): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.sso.mapping,\n        { tenantId, roleMappings, attributeMapping },\n        { token: managementKey },\n      ),\n    ),\n});\n\nexport default withSSOSettings;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { AccessKey, AssociatedTenant, CreatedAccessKeyResponse } from './types';\n\ntype SingleKeyResponse = {\n  key: AccessKey;\n};\n\ntype MultipleKeysResponse = {\n  keys: AccessKey[];\n};\n\nconst withAccessKey = (sdk: CoreSdk, managementKey?: string) => ({\n  /**\n   * Create a new access key for a project.\n   * @param name Access key name\n   * @param expireTime When the access key expires. Keep at 0 to make it indefinite.\n   * @param roles Optional roles in the project. Does not apply for multi-tenants\n   * @param keyTenants Optional associated tenants for this key and its roles for each.\n   * @returns A newly created key and its cleartext. Make sure to save the cleartext securely.\n   */\n  create: (\n    name: string,\n    expireTime: number,\n    roles?: string[],\n    keyTenants?: AssociatedTenant[],\n  ): Promise<SdkResponse<CreatedAccessKeyResponse>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.accessKey.create,\n        { name, expireTime, roleNames: roles, keyTenants },\n        { token: managementKey },\n      ),\n    ),\n  /**\n   * Load an access key.\n   * @param id Access key ID to load\n   * @returns The loaded access key.\n   */\n  load: (id: string): Promise<SdkResponse<AccessKey>> =>\n    transformResponse<SingleKeyResponse, AccessKey>(\n      sdk.httpClient.get(apiPaths.accessKey.load, {\n        queryParams: { id },\n        token: managementKey,\n      }),\n      (data) => data.key,\n    ),\n  /**\n   * Search all access keys\n   * @param tenantIds Optional tenant ID filter to apply on the search results\n   * @returns An array of found access keys\n   */\n  searchAll: (tenantIds?: string[]): Promise<SdkResponse<AccessKey[]>> =>\n    transformResponse<MultipleKeysResponse, AccessKey[]>(\n      sdk.httpClient.post(apiPaths.accessKey.search, { tenantIds }, { token: managementKey }),\n      (data) => data.keys,\n    ),\n  /**\n   * Update an access key.\n   * @param id Access key ID to load\n   * @param name The updated access key name\n   * @returns The updated access key\n   */\n  update: (id: string, name: string): Promise<SdkResponse<AccessKey>> =>\n    transformResponse<SingleKeyResponse, AccessKey>(\n      sdk.httpClient.post(apiPaths.accessKey.update, { id, name }, { token: managementKey }),\n      (data) => data.key,\n    ),\n  /**\n   * Deactivate an access key. Deactivated access keys cannot be used until they are\n   * activated again.\n   * @param id Access key ID to deactivate\n   */\n  deactivate: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.accessKey.deactivate, { id }, { token: managementKey }),\n    ),\n  /**\n   * Activate an access key. Only deactivated access keys can be activated again.\n   * @param id Access key ID to activate\n   */\n  activate: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.accessKey.activate, { id }, { token: managementKey }),\n    ),\n  /**\n   * Delete an access key. IMPORTANT: This cannot be undone. Use carefully.\n   * @param id Access key ID to delete\n   */\n  delete: (id: string): Promise<SdkResponse<never>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.accessKey.delete, { id }, { token: managementKey }),\n    ),\n});\n\nexport default withAccessKey;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { FlowResponse, FlowsResponse, Screen, Flow } from './types';\n\nconst WithFlow = (sdk: CoreSdk, managementKey?: string) => ({\n  list: (): Promise<SdkResponse<FlowsResponse>> =>\n    transformResponse(sdk.httpClient.post(apiPaths.flow.list, {}, { token: managementKey })),\n  export: (flowId: string): Promise<SdkResponse<FlowResponse>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.flow.export, { flowId }, { token: managementKey }),\n    ),\n  import: (flowId: string, flow: Flow, screens?: Screen[]): Promise<SdkResponse<FlowResponse>> =>\n    transformResponse(\n      sdk.httpClient.post(\n        apiPaths.flow.import,\n        { flowId, flow, screens },\n        { token: managementKey },\n      ),\n    ),\n});\n\nexport default WithFlow;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { Theme, ThemeResponse } from './types';\n\nconst WithTheme = (sdk: CoreSdk, managementKey?: string) => ({\n  export: (): Promise<SdkResponse<ThemeResponse>> =>\n    transformResponse(sdk.httpClient.post(apiPaths.theme.export, {}, { token: managementKey })),\n  import: (theme: Theme): Promise<SdkResponse<ThemeResponse>> =>\n    transformResponse(\n      sdk.httpClient.post(apiPaths.theme.import, { theme }, { token: managementKey }),\n    ),\n});\n\nexport default WithTheme;\n","import { SdkResponse, transformResponse } from '@descope/core-js-sdk';\nimport { CoreSdk } from '../types';\nimport apiPaths from './paths';\nimport { AuditSearchOptions, AuditRecord } from './types';\n\nconst WithAudit = (sdk: CoreSdk, managementKey?: string) => ({\n  /**\n   * Search the audit trail for up to last 30 days based on given optional parameters\n   * @param searchOptions to filter which audit records to return\n   * @returns the audit records array\n   */\n  search: (searchOptions: AuditSearchOptions): Promise<SdkResponse<AuditRecord[]>> => {\n    const body = { ...searchOptions, externalIds: searchOptions.loginIds };\n    delete body.loginIds;\n    return transformResponse(\n      sdk.httpClient.post(apiPaths.audit.search, body, { token: managementKey }),\n      (data) =>\n        data?.audits.map((a) => {\n          const res = {\n            ...a,\n            occurred: parseFloat(a.occurred),\n            loginIds: a.externalIds,\n          };\n          delete res.externalIds;\n          return res;\n        }),\n    );\n  },\n});\n\nexport default WithAudit;\n","import nodeFetch, { Headers } from 'node-fetch-commonjs';\n\nglobalThis.Headers ??= Headers;\n\nconst highWaterMarkMb = 1024 * 1024 * 30; // 30MB\n\n// we are increasing the response buffer size due to an issue where node-fetch hangs when response is too big\nconst patchedFetch = (...args: Parameters<typeof nodeFetch>) => {\n  // we can get Request on the first arg, or RequestInfo on the second arg\n  // we want to make sure we are setting the \"highWaterMark\" so we are doing it on both args\n  args.forEach((arg) => {\n    // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-unused-expressions\n    arg && ((arg as any).highWaterMark ??= highWaterMarkMb);\n  });\n\n  return nodeFetch(...args);\n};\n\nexport default patchedFetch as unknown as typeof fetch;\n","import createSdk, { ExchangeAccessKeyResponse, SdkResponse, wrapWith } from '@descope/core-js-sdk';\nimport { JWK, JWTHeaderParameters, KeyLike, errors, importJWK, jwtVerify } from 'jose';\nimport {\n  permissionsClaimName,\n  refreshTokenCookieName,\n  rolesClaimName,\n  sessionTokenCookieName,\n} from './constants';\nimport { getAuthorizationClaimItems, isUserAssociatedWithTenant, withCookie } from './helpers';\nimport withManagement from './management';\nimport { AuthenticationInfo } from './types';\nimport fetch from './fetch-polyfill';\n\ndeclare const BUILD_VERSION: string;\n\n/** Configuration arguments which include the Descope core SDK args and an optional management key */\ntype NodeSdkArgs = Parameters<typeof createSdk>[0] & {\n  managementKey?: string;\n  publicKey?: string;\n};\n\nconst nodeSdk = ({ managementKey, publicKey, ...config }: NodeSdkArgs) => {\n  const coreSdk = createSdk({\n    ...config,\n    fetch,\n    baseHeaders: {\n      ...config.baseHeaders,\n      'x-descope-sdk-name': 'nodejs',\n      'x-descope-sdk-node-version': process?.versions?.node || '',\n      'x-descope-sdk-version': BUILD_VERSION,\n    },\n  });\n\n  const { projectId, logger } = config;\n\n  const keys: Record<string, KeyLike | Uint8Array> = {};\n\n  /** Fetch the public keys (JWKs) from Descope for the configured project */\n  const fetchKeys = async () => {\n    if (publicKey) {\n      try {\n        const parsedKey = JSON.parse(publicKey);\n        const key = await importJWK(parsedKey);\n        return {\n          [parsedKey.kid]: key,\n        };\n      } catch (e) {\n        logger?.error('Failed to parse the provided public key', e);\n        throw new Error(`Failed to parse public key. Error: ${e}`);\n      }\n    }\n\n    const keysWrapper = await coreSdk.httpClient\n      .get(`v2/keys/${projectId}`)\n      .then((resp) => resp.json());\n    const publicKeys: JWK[] = keysWrapper.keys;\n    if (!Array.isArray(publicKeys)) return {};\n    const kidJwksPairs = await Promise.all(\n      publicKeys.map(async (key) => [key.kid, await importJWK(key)]),\n    );\n\n    return kidJwksPairs.reduce(\n      (acc, [kid, jwk]) => (kid ? { ...acc, [kid.toString()]: jwk } : acc),\n      {},\n    );\n  };\n\n  const management = withManagement(coreSdk, managementKey);\n\n  const sdk = {\n    ...coreSdk,\n\n    /**\n     * Provides various APIs for managing a Descope project programmatically. A management key must\n     * be provided as an argument when initializing the SDK to use these APIs. Management keys can be\n     * generated in the Descope console.\n     */\n    management,\n\n    /** Get the key that can validate the given JWT KID in the header. Can retrieve the public key from local cache or from Descope. */\n    async getKey(header: JWTHeaderParameters): Promise<KeyLike | Uint8Array> {\n      if (!header?.kid) throw Error('header.kid must not be empty');\n\n      if (keys[header.kid]) return keys[header.kid];\n\n      // do we need to fetch once or every time?\n      Object.assign(keys, await fetchKeys());\n\n      if (!keys[header.kid]) throw Error('failed to fetch matching key');\n\n      return keys[header.kid];\n    },\n\n    /**\n     * Validate the given JWT with the right key and make sure the issuer is correct\n     * @param jwt the JWT string to parse and validate\n     * @returns AuthenticationInfo with the parsed token and JWT. Will throw an error if validation fails.\n     */\n    async validateJwt(jwt: string): Promise<AuthenticationInfo> {\n      // Do not hard-code the algo because library does not support `None` so all are valid\n      const res = await jwtVerify(jwt, sdk.getKey, { clockTolerance: 5 });\n      const token = res.payload;\n\n      if (token) {\n        token.iss = token.iss?.split('/').pop(); // support both url and project id as issuer\n        if (token.iss !== projectId) {\n          // We must do the verification here, since issuer can be either project ID or URL\n          throw new errors.JWTClaimValidationFailed(\n            'unexpected \"iss\" claim value',\n            'iss',\n            'check_failed',\n          );\n        }\n      }\n\n      return { jwt, token };\n    },\n\n    /**\n     * Validate an active session\n     * @param sessionToken session JWT to validate\n     * @returns AuthenticationInfo promise or throws Error if there is an issue with JWTs\n     */\n    async validateSession(sessionToken: string): Promise<AuthenticationInfo> {\n      if (!sessionToken) throw Error('session token is required for validation');\n\n      try {\n        const token = await sdk.validateJwt(sessionToken);\n        return token;\n      } catch (error) {\n        /* istanbul ignore next */\n        logger?.error('session validation failed', error);\n        throw Error(`session validation failed. Error: ${error}`);\n      }\n    },\n\n    /**\n     * Refresh the session using a refresh token\n     * @param refreshToken refresh JWT to refresh the session with\n     * @returns AuthenticationInfo promise or throws Error if there is an issue with JWTs\n     */\n    async refreshSession(refreshToken: string): Promise<AuthenticationInfo> {\n      if (!refreshToken) throw Error('refresh token is required to refresh a session');\n\n      try {\n        await sdk.validateJwt(refreshToken);\n        const jwtResp = await sdk.refresh(refreshToken);\n        if (jwtResp.ok) {\n          const token = await sdk.validateJwt(jwtResp.data?.sessionJwt);\n          return token;\n        }\n        /* istanbul ignore next */\n        throw Error(jwtResp.error?.errorMessage);\n      } catch (refreshTokenErr) {\n        /* istanbul ignore next */\n        logger?.error('refresh token validation failed', refreshTokenErr);\n        throw Error(`refresh token validation failed, Error: ${refreshTokenErr}`);\n      }\n    },\n\n    /**\n     * Validate session and refresh it if it expired\n     * @param sessionToken session JWT\n     * @param refreshToken refresh JWT\n     * @returns AuthenticationInfo promise or throws Error if there is an issue with JWTs\n     */\n    async validateAndRefreshSession(\n      sessionToken?: string,\n      refreshToken?: string,\n    ): Promise<AuthenticationInfo> {\n      if (!sessionToken && !refreshToken) throw Error('both session and refresh tokens are empty');\n\n      try {\n        const token = await sdk.validateSession(sessionToken);\n        return token;\n      } catch (error) {\n        /* istanbul ignore next */\n        logger?.log(`session validation failed with error ${error} - trying to refresh it`);\n      }\n\n      return sdk.refreshSession(refreshToken);\n    },\n\n    /**\n     * Exchange API key (access key) for a session key\n     * @param accessKey access key to exchange for a session JWT\n     * @returns AuthenticationInfo with session JWT data\n     */\n    async exchangeAccessKey(accessKey: string): Promise<AuthenticationInfo> {\n      if (!accessKey) throw Error('access key must not be empty');\n\n      let resp: SdkResponse<ExchangeAccessKeyResponse>;\n      try {\n        resp = await sdk.accessKey.exchange(accessKey);\n      } catch (error) {\n        logger?.error('failed to exchange access key', error);\n        throw Error(`could not exchange access key - Failed to exchange. Error: ${error}`);\n      }\n\n      const { sessionJwt } = resp.data;\n      if (!sessionJwt) {\n        logger?.error('failed to parse exchange access key response');\n        throw Error('could not exchange access key');\n      }\n\n      try {\n        const token = await sdk.validateJwt(sessionJwt);\n        return token;\n      } catch (error) {\n        logger?.error('failed to parse jwt from access key', error);\n        throw Error(`could not exchange access key - failed to validate jwt. Error: ${error}`);\n      }\n    },\n\n    /**\n     * Make sure that all given permissions exist on the parsed JWT top level claims\n     * @param authInfo JWT parsed info\n     * @param permissions list of permissions to make sure they exist on te JWT claims\n     * @returns true if all permissions exist, false otherwise\n     */\n    validatePermissions(authInfo: AuthenticationInfo, permissions: string[]): boolean {\n      return sdk.validateTenantPermissions(authInfo, null, permissions);\n    },\n\n    /**\n     * Make sure that all given permissions exist on the parsed JWT tenant claims\n     * @param authInfo JWT parsed info\n     * @param permissions list of permissions to make sure they exist on te JWT claims\n     * @returns true if all permissions exist, false otherwise\n     */\n    validateTenantPermissions(\n      authInfo: AuthenticationInfo,\n      tenant: string,\n      permissions: string[],\n    ): boolean {\n      // check if user is associated to the tenant\n      if (tenant && !isUserAssociatedWithTenant(authInfo, tenant)) return false;\n\n      const granted = getAuthorizationClaimItems(authInfo, permissionsClaimName, tenant);\n      return permissions.every((perm) => granted.includes(perm));\n    },\n\n    /**\n     * Make sure that all given roles exist on the parsed JWT top level claims\n     * @param authInfo JWT parsed info\n     * @param roles list of roles to make sure they exist on te JWT claims\n     * @returns true if all roles exist, false otherwise\n     */\n    validateRoles(authInfo: AuthenticationInfo, roles: string[]): boolean {\n      return sdk.validateTenantRoles(authInfo, null, roles);\n    },\n\n    /**\n     * Make sure that all given roles exist on the parsed JWT tenant claims\n     * @param authInfo JWT parsed info\n     * @param roles list of roles to make sure they exist on te JWT claims\n     * @returns true if all roles exist, false otherwise\n     */\n    validateTenantRoles(authInfo: AuthenticationInfo, tenant: string, roles: string[]): boolean {\n      // check if user is associated to the tenant\n      if (tenant && !isUserAssociatedWithTenant(authInfo, tenant)) return false;\n\n      const membership = getAuthorizationClaimItems(authInfo, rolesClaimName, tenant);\n      return roles.every((role) => membership.includes(role));\n    },\n  };\n\n  return wrapWith(\n    sdk,\n    [\n      'otp.verify.email',\n      'otp.verify.sms',\n      'otp.verify.whatsapp',\n      'magicLink.verify',\n      'enchantedLink.signUp',\n      'enchantedLink.signIn',\n      'oauth.exchange',\n      'saml.exchange',\n      'totp.verify',\n      'webauthn.signIn.finish',\n      'webauthn.signUp.finish',\n      'refresh',\n    ] as const,\n    withCookie,\n  );\n};\n\n/** Descope SDK client with delivery methods enum.\n *\n * Please see full documentation at {@link https://docs.descope.com/guides Descope Docs}\n * @example Usage\n *\n * ```js\n * import descopeSdk from '@descope/node-sdk';\n *\n * const myProjectId = 'xxx';\n * const sdk = descopeSdk({ projectId: myProjectId });\n *\n * const userLoginId = 'loginId';\n * sdk.otp.signIn.email(userLoginId);\n * const jwtResponse = sdk.otp.verify.email(userLoginId, codeFromEmail);\n * ```\n */\n\nnodeSdk.RefreshTokenCookieName = refreshTokenCookieName;\nnodeSdk.SessionTokenCookieName = sessionTokenCookieName;\n\nexport default nodeSdk;\nexport type {\n  DeliveryMethod,\n  OAuthProvider,\n  ResponseData,\n  SdkResponse,\n  JWTResponse,\n} from '@descope/core-js-sdk';\nexport type { AuthenticationInfo };\n","import { CoreSdk } from '../types';\nimport withUser from './user';\nimport withProject from './project';\nimport withTenant from './tenant';\nimport withJWT from './jwt';\nimport withPermission from './permission';\nimport withRole from './role';\nimport withGroup from './group';\nimport withSSOSettings from './sso';\nimport withAccessKey from './accesskey';\nimport WithFlow from './flow';\nimport WithTheme from './theme';\nimport WithAudit from './audit';\n\n/** Constructs a higher level Management API that wraps the functions from code-js-sdk */\nconst withManagement = (sdk: CoreSdk, managementKey?: string) => ({\n  user: withUser(sdk, managementKey),\n  project: withProject(sdk, managementKey),\n  accessKey: withAccessKey(sdk, managementKey),\n  tenant: withTenant(sdk, managementKey),\n  sso: withSSOSettings(sdk, managementKey),\n  jwt: withJWT(sdk, managementKey),\n  permission: withPermission(sdk, managementKey),\n  role: withRole(sdk, managementKey),\n  group: withGroup(sdk, managementKey),\n  flow: WithFlow(sdk, managementKey),\n  theme: WithTheme(sdk, managementKey),\n  audit: WithAudit(sdk, managementKey),\n});\n\nexport default withManagement;\n"],"names":["refreshTokenCookieName","authorizedTenantsClaimName","withCookie","fn","async","args","resp","data","_d","refreshJwt","rest","__rest","cookies","options","push","cookieDomain","cookieMaxAge","cookiePath","_a","response","headers","get","cookie","name","match","RegExp","getCookieValue","_b","_c","Object","assign","getAuthorizationClaimItems","authInfo","claim","tenant","value","token","Array","isArray","isUserAssociatedWithTenant","apiPaths","create","update","delete","deleteAllTestUsers","load","search","getProviderToken","updateStatus","updateLoginId","updateEmail","updatePhone","updateDisplayName","updatePicture","updateCustomAttribute","addRole","removeRole","addTenant","removeTenant","setPassword","expirePassword","generateOTPForTest","generateMagicLinkForTest","generateEnchantedLinkForTest","generateEmbeddedLink","updateName","deactivate","activate","loadAll","settings","metadata","mapping","list","export","import","loadAllGroups","loadAllGroupsForMember","loadAllGroupMembers","withUser","sdk","managementKey","loginId","email","phone","displayName","roles","userTenants","customAttributes","picture","transformResponse","httpClient","post","roleNames","user","createTestUser","test","invite","verifiedEmail","verifiedPhone","queryParams","loadByUserId","userId","searchAll","tenantIds","limit","page","testUsersOnly","withTestUser","statuses","users","provider","status","newLoginId","isVerified","verified","attributeKey","attributeValue","addRoles","removeRoles","tenantId","addTenantRoles","removeTenantRoles","generateOTPForTestUser","deliveryMethod","generateMagicLinkForTestUser","uri","URI","generateEnchantedLinkForTestUser","customClaims","password","withProject","withTenant","selfProvisioningDomains","createWithId","id","tenants","withJWT","jwt","withPermission","description","newName","permissions","withRole","permissionNames","withGroup","userIds","loginIds","groupId","withSSOSettings","getSettings","deleteSettings","configureSettings","idpURL","idpCert","entityId","redirectURL","domain","configureMetadata","idpMetadataURL","configureMapping","roleMappings","attributeMapping","withAccessKey","expireTime","keyTenants","key","keys","WithFlow","flowId","flow","screens","WithTheme","theme","WithAudit","searchOptions","body","externalIds","audits","map","a","res","occurred","parseFloat","globalThis","Headers","patchedFetch","forEach","arg","highWaterMark","nodeFetch","nodeSdk","publicKey","config","coreSdk","createSdk","fetch","baseHeaders","process","versions","node","projectId","logger","management","project","accessKey","sso","permission","role","group","audit","withManagement","header","kid","Error","parsedKey","JSON","parse","importJWK","e","error","publicKeys","then","json","Promise","all","reduce","acc","jwk","toString","fetchKeys","jwtVerify","getKey","clockTolerance","payload","iss","split","pop","errors","JWTClaimValidationFailed","sessionToken","validateJwt","refreshToken","jwtResp","refresh","ok","sessionJwt","errorMessage","refreshTokenErr","validateSession","log","refreshSession","exchange","validatePermissions","validateTenantPermissions","granted","every","perm","includes","validateRoles","validateTenantRoles","membership","wrapWith","RefreshTokenCookieName","SessionTokenCookieName"],"mappings":"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"}