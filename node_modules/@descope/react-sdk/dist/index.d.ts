import React, { FC, DOMAttributes } from 'react';
import DescopeWc, { ILogger, ThemeOptions, AutoFocusOptions } from '@descope/web-component';
export { ILogger } from '@descope/web-component';
import * as _descope_core_js_sdk from '@descope/core-js-sdk';

interface IAuthProviderProps {
    projectId: string;
    baseUrl?: string;
    sessionTokenViaCookie?: boolean;
    children?: JSX.Element;
}
declare const AuthProvider: FC<IAuthProviderProps>;

declare const createSdkWrapper: <P extends Omit<{
    projectId: string;
    logger?: {
        debug: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        log: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        error: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        warn: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
    };
    baseUrl?: string;
    hooks?: {
        beforeRequest?: (config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig;
        afterRequest?: (req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>;
    };
    cookiePolicy?: RequestCredentials;
    baseHeaders?: HeadersInit;
    fetch?: typeof fetch;
}, "hooks"> & {
    hooks?: {
        beforeRequest?: ((config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig) | ((config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig)[];
        afterRequest?: ((req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>) | ((req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>)[];
    };
} & {
    fpKey?: string;
    fpLoad?: boolean;
} & {
    autoRefresh?: boolean;
} & {
    persistTokens?: boolean;
    sessionTokenViaCookie?: boolean;
}>(config: P) => ((({
    flow: {
        start: (flowId: string, options?: Pick<{
            redirectUrl?: string;
            location?: string;
            tenant?: string;
            deviceInfo?: {
                webAuthnSupport?: boolean;
            };
            lastAuth?: {
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            };
            redirectAuth?: {
                callbackUrl: string;
                codeChallenge: string;
            };
            oidcIdpStateId?: string;
        }, "tenant" | "redirectUrl" | "redirectAuth" | "oidcIdpStateId"> & {
            lastAuth?: Omit<{
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            }, "loginId" | "name">;
        }, conditionInteractionId?: string, interactionId?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }, version?: number) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
        next: (executionId: string, stepId: string, interactionId: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }, version?: number) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
    };
    webauthn: {
        signUp: ((identifier: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, loginOptions?: {
                stepup?: boolean;
                mfa?: boolean;
                customClaims?: Record<string, any>;
            }, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signUpOrIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
        };
        update: ((identifier: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            start: (loginId: string, origin: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        };
        helpers: {
            create: (options: string) => Promise<string>;
            get: (options: string) => Promise<string>;
            isSupported: (requirePlatformAuthenticator?: boolean) => Promise<boolean>;
            conditional: (options: string, abort: AbortController) => Promise<string>;
        };
    };
    accessKey: {
        exchange: (accessKey: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ExchangeAccessKeyResponse>>;
    };
    otp: {
        verify: {
            sms: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            whatsapp: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            email: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: {
            sms: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T extends boolean>(loginId: string, email: string, token?: string, updateOptions?: {
                addToLoginIDs?: T;
                onMergeUseExisting?: T extends true ? boolean : never;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_1_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_1;
                    onMergeUseExisting?: T_1_1 extends true ? boolean : never;
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    magicLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: {
            sms: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, uri: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, uri: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, uri: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_2 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_2;
                onMergeUseExisting?: T_2 extends true ? boolean : never;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_3_1 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_1;
                    onMergeUseExisting?: T_3_1 extends true ? boolean : never;
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    enchantedLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        signIn: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUpOrIn: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUp: (loginId: string, uri: string, user?: {
            email?: string;
            name?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: {
            email: <T_4 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_4;
                onMergeUseExisting?: T_4 extends true ? boolean : never;
            }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        };
    };
    oauth: {
        start: {
            facebook: <B extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            github: <B_1 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_1) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            google: <B_2 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_2) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            microsoft: <B_3 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_3) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            gitlab: <B_4 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_4) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            apple: <B_5 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_5) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            discord: <B_6 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_6) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            linkedin: <B_7 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_7) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        };
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    saml: {
        start: (tenantIdOrEmail: string, redirectUrl?: string, loginOptions?: {
            stepup?: boolean;
            mfa?: boolean;
            customClaims?: Record<string, any>;
        }, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    totp: {
        signUp: (loginId: string, user?: {
            email?: string;
            name?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
        verify: (loginId: string, code: string, loginOptions?: {
            stepup?: boolean;
            mfa?: boolean;
            customClaims?: Record<string, any>;
        }, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: (loginId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
    };
    password: {
        signUp: (loginId: string, password: string, user?: {
            email?: string;
            name?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: (loginId: string, password: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        sendReset: (loginId: string, redirectUrl?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
            resetMethod: string;
            pendingRef?: string;
            linkId?: string;
            maskedEmail: string;
        }>>;
        update: (loginId: string, newPassword: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        replace: (loginId: string, oldPassword: string, newPassword: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        policy: () => Promise<_descope_core_js_sdk.SdkResponse<{
            minLength: number;
            lowercase: boolean;
            uppercase: boolean;
            number: boolean;
            nonAlphanumeric: boolean;
        }>>;
    };
    refresh: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    logout: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    logoutAll: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    me: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserResponse>>;
    isJwtExpired: (token: string) => boolean;
    getTenants: (token: string) => string[];
    getJwtPermissions: (token: string, tenant?: string) => string[];
    getJwtRoles: (token: string, tenant?: string) => string[];
    httpClient: {
        get: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        post: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        put: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        delete: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        hooks?: {
            beforeRequest?: (config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig;
            afterRequest?: (req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>;
        };
    };
} | {
    flow: {
        start: (flowId: string, options?: Pick<{
            redirectUrl?: string;
            location?: string;
            tenant?: string;
            deviceInfo?: {
                webAuthnSupport?: boolean;
            };
            lastAuth?: {
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            };
            redirectAuth?: {
                callbackUrl: string;
                codeChallenge: string;
            };
            oidcIdpStateId?: string;
        }, "tenant" | "redirectUrl" | "redirectAuth" | "oidcIdpStateId"> & {
            lastAuth?: Omit<{
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            }, "loginId" | "name">;
        }, conditionInteractionId?: string, interactionId?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }, version?: number) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
        next: (executionId: string, stepId: string, interactionId: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }, version?: number) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
    };
    webauthn: {
        signUp: ((identifier: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, loginOptions?: {
                stepup?: boolean;
                mfa?: boolean;
                customClaims?: Record<string, any>;
            }, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signUpOrIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
        };
        update: ((identifier: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            start: (loginId: string, origin: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        };
        helpers: {
            create: (options: string) => Promise<string>;
            get: (options: string) => Promise<string>;
            isSupported: (requirePlatformAuthenticator?: boolean) => Promise<boolean>;
            conditional: (options: string, abort: AbortController) => Promise<string>;
        };
    };
    accessKey: {
        exchange: (accessKey: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ExchangeAccessKeyResponse>>;
    };
    otp: {
        verify: {
            sms: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            whatsapp: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            email: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: {
            sms: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_5 extends boolean>(loginId: string, email: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_5;
                onMergeUseExisting?: T_5 extends true ? boolean : never;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_1_2 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_2;
                    onMergeUseExisting?: T_1_2 extends true ? boolean : never;
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_1_3 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_3;
                    onMergeUseExisting?: T_1_3 extends true ? boolean : never;
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    magicLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: {
            sms: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, uri: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, uri: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, uri: string, user?: {
                email?: string;
                name?: string;
                phone?: string;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_2_1 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_2_1;
                onMergeUseExisting?: T_2_1 extends true ? boolean : never;
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_3_2 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_2;
                    onMergeUseExisting?: T_3_2 extends true ? boolean : never;
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_3_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_3;
                    onMergeUseExisting?: T_3_3 extends true ? boolean : never;
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    enchantedLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        signIn: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUpOrIn: (loginId: string, uri: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUp: (loginId: string, uri: string, user?: {
            email?: string;
            name?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: {
            email: <T_4_1 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_4_1;
                onMergeUseExisting?: T_4_1 extends true ? boolean : never;
            }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        };
    };
    oauth: {
        start: {
            facebook: <B_8 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_8) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            github: <B_1_1 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_1_1) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            google: <B_2_1 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_2_1) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            microsoft: <B_3_1 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_3_1) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            gitlab: <B_4_1 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_4_1) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            apple: <B_5_1 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_5_1) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            discord: <B_6_1 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_6_1) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            linkedin: <B_7_1 extends {
                redirect: boolean;
            }>(redirectURL?: string, config?: B_7_1) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        };
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    saml: {
        start: (tenantIdOrEmail: string, redirectUrl?: string, loginOptions?: {
            stepup?: boolean;
            mfa?: boolean;
            customClaims?: Record<string, any>;
        }, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    totp: {
        signUp: (loginId: string, user?: {
            email?: string;
            name?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
        verify: (loginId: string, code: string, loginOptions?: {
            stepup?: boolean;
            mfa?: boolean;
            customClaims?: Record<string, any>;
        }, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: (loginId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
    };
    password: {
        signUp: (loginId: string, password: string, user?: {
            email?: string;
            name?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: (loginId: string, password: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        sendReset: (loginId: string, redirectUrl?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
            resetMethod: string;
            pendingRef?: string;
            linkId?: string;
            maskedEmail: string;
        }>>;
        update: (loginId: string, newPassword: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        replace: (loginId: string, oldPassword: string, newPassword: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        policy: () => Promise<_descope_core_js_sdk.SdkResponse<{
            minLength: number;
            lowercase: boolean;
            uppercase: boolean;
            number: boolean;
            nonAlphanumeric: boolean;
        }>>;
    };
    refresh: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    logout: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    logoutAll: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    me: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserResponse>>;
    isJwtExpired: (token: string) => boolean;
    getTenants: (token: string) => string[];
    getJwtPermissions: (token: string, tenant?: string) => string[];
    getJwtRoles: (token: string, tenant?: string) => string[];
    httpClient: {
        get: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        post: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        put: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        delete: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        hooks?: {
            beforeRequest?: (config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig;
            afterRequest?: (req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>;
        };
    };
}) & {
    onSessionTokenChange: (cb: (data: string) => void) => () => any[];
    onUserChange: (cb: (data: _descope_core_js_sdk.UserResponse) => void) => () => any[];
}) & {
    getLastUserLoginId: () => string;
    getLastUserDisplayName: () => string;
}) & {
    getRefreshToken: () => string;
    getSessionToken: () => string;
};
declare const getSessionToken: () => string;
declare const getRefreshToken: () => string;
declare const getJwtPermissions: (token?: any, tenant?: string) => string[];
declare const getJwtRoles: (token?: any, tenant?: string) => string[];
declare const refresh: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;

declare global {
    namespace JSX {
        interface IntrinsicElements {
            ['descope-wc']: DescopeCustomElement;
        }
    }
}
type Sdk = ReturnType<typeof createSdkWrapper>;
type CustomEvents<K extends string> = {
    [key in K]: (event: CustomEvent) => void;
};
type CustomElement<T, K extends string = ''> = Partial<T & DOMAttributes<T> & {
    children: React.ReactChild;
    ref: React.Ref<HTMLElement>;
} & CustomEvents<`on${K}`>>;
type DescopeCustomElement = CustomElement<DescopeWc, 'success' | 'error'>;
interface DescopeProps {
    flowId: string;
    onSuccess?: DescopeCustomElement['onsuccess'];
    onError?: DescopeCustomElement['onerror'];
    logger?: ILogger;
    tenant?: string;
    theme?: ThemeOptions;
    locale?: string;
    autoFocus?: AutoFocusOptions;
    debug?: boolean;
    telemetryKey?: string;
    redirectUrl?: string;
    errorTransformer?: (error: {
        text: string;
        type: string;
    }) => string;
}

type DefaultFlowProps = Omit<DescopeProps, 'flowId'>;

declare const SignInFlow: (props: DefaultFlowProps) => React.JSX.Element;
declare const SignUpFlow: (props: DefaultFlowProps) => React.JSX.Element;
declare const SignUpOrInFlow: (props: DefaultFlowProps) => React.JSX.Element;

declare const Descope: React.ForwardRefExoticComponent<DescopeProps & React.RefAttributes<HTMLElement>>;

declare const useDescope: () => Sdk;

declare const useSession: () => {
    isSessionLoading: boolean;
    sessionToken: string;
    isAuthenticated: boolean;
};

declare const useUser: () => {
    isUserLoading: boolean;
    user: _descope_core_js_sdk.UserResponse;
};

export { AuthProvider, Descope, SignInFlow, SignUpFlow, SignUpOrInFlow, getJwtPermissions, getJwtRoles, getRefreshToken, getSessionToken, refresh, useDescope, useSession, useUser };
