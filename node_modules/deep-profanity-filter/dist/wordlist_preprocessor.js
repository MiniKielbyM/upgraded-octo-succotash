"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.preprocessWordLists = void 0;
var regex_handler_1 = require("./regex_handler");
/**
 * Creates the regular expressions facilitating the search of bad words,
 * as well as the lookup table of all whitelisted words (linked to only the
 * those bad words which are contained in this whitelisted word).
 * This is used in the filtering algorithms.
 *
 * IMPORTANT: If you wish to match a backslash `\` character in any bad word,
 * you will always need to escape it. Trying to detect someone entering
 * `¯\_(ツ)_/¯` would mean your bad word would need to be `¯\\_(ツ)_/¯`.
 * If you allow others to define bad word inputs, always sanitise strings
 * containing backslashes by replacing them with two backslashes.
 *
 * @param badwords - an array of bad words or phrases that are being
 * checked in the texts that we filter
 * @param whitelist - an array of whitelisted words or phrases that
 * contain one or more bad words but are purposefully not being checked
 * @param checkCircumventions - (Default: `true`)
 * if false, the bad word matched exactly. If true, the bad word is additionally
 * matched with any special characters in between, such as `ki%tt-y`, as well as
 * with all characters spaced out, such as `k i t t y`. It makes sense to set this
 * value to `false` when matching URLs/links or in-text-emojis such as `¯\_(ツ)_/¯`
 * @param considerPrecedingApostrophes - (Default: `true`)
 * if true, and in the case of spaced out words without a wildcard at the start,
 * it will NOT allow phrases such as "i'd b a d w o r d" or "it's b a d w o r d"
 * or "n'o't'a'b'a'd'w'o'r'd" (the latter may be considered okay by some.)
 * If considerPrecedingApostrophes = false, all of the above are allowed.
 * Consider setting this value based on the language you're targeting, but for
 * English it might be reasonable to set it to "true".
 * @param considerFollowUpApostrophes - (Default: `true`)
 * if true, and in the case of spaced out words without a wildcard at the end,
 * it will NOT allow phrases such as "b a d w o r d's" or "b a d w o r d'i n g" or
 * "b'a'd'w'o'r'd'i'n'g" (where "badword" is the blocked term)
 * If considerFollowUpApostrophes = false, all of the above are allowed.
 * (Note: In either case, formats such as "b a d w o r d'ing" and "b a d w o r d'ed" get blocked)
 * Consider setting this value based on the language you're targeting, but for
 * English it might be reasonable to set it to "true".
 * Note: The apostrophe circumventions are very rarely used, so this is an
 * edge case, especially because cases where the word is not s p a c e d out are
 * handled differently.
 * @returns a mapped whitelist allowing easy lookup for all bad words
 * to see all whitelisted words that contain this bad word
 */
var preprocessWordLists = function (badwords, whitelist, _a) {
    var e_1, _b, e_2, _c;
    var _d = _a === void 0 ? {} : _a, _e = _d.checkCircumventions, checkCircumventions = _e === void 0 ? true : _e, _f = _d.considerPrecedingApostrophes, considerPrecedingApostrophes = _f === void 0 ? true : _f, _g = _d.considerFollowUpApostrophes, considerFollowUpApostrophes = _g === void 0 ? true : _g;
    var badWordData = [];
    var whitelistMap = {}; // map from badword -> [goodwords] (array of good word data)
    try {
        for (var badwords_1 = __values(badwords), badwords_1_1 = badwords_1.next(); !badwords_1_1.done; badwords_1_1 = badwords_1.next()) {
            var badword = badwords_1_1.value;
            if (badword === '') {
                continue;
            }
            var badWordComponents = (0, regex_handler_1.getRegExpComponents)(badword);
            var badwordRegexp = (0, regex_handler_1.getNormalRegExp)(badWordComponents);
            badWordData.push({
                word: badword,
                normalRegexp: badwordRegexp,
                strictRegexp: checkCircumventions ? (0, regex_handler_1.getCircumventionRegExp)(badWordComponents) : undefined,
                whitelistedStrictRegexpArray: checkCircumventions
                    ? [
                        (0, regex_handler_1.getCircumventionWhitelistRegExp)(badWordComponents, true, considerPrecedingApostrophes),
                        (0, regex_handler_1.getCircumventionWhitelistRegExp)(badWordComponents, false, considerFollowUpApostrophes),
                    ].filter(function (item) { return item !== undefined; })
                    : [],
            });
            try {
                for (var whitelist_1 = (e_2 = void 0, __values(whitelist)), whitelist_1_1 = whitelist_1.next(); !whitelist_1_1.done; whitelist_1_1 = whitelist_1.next()) {
                    var goodword = whitelist_1_1.value;
                    if (goodword === '') {
                        continue;
                    }
                    if (goodword.match(badwordRegexp)) {
                        var goodwordComponents = (0, regex_handler_1.getRegExpComponents)(goodword);
                        var data = {
                            word: goodword,
                            normalRegexp: (0, regex_handler_1.getNormalRegExp)(goodwordComponents),
                            strictRegexp: (0, regex_handler_1.getCircumventionRegExp)(goodwordComponents),
                        };
                        if (whitelistMap[badword]) {
                            whitelistMap[badword].push(data);
                        }
                        else {
                            whitelistMap[badword] = [data];
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (whitelist_1_1 && !whitelist_1_1.done && (_c = whitelist_1.return)) _c.call(whitelist_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (badwords_1_1 && !badwords_1_1.done && (_b = badwords_1.return)) _b.call(badwords_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        badWordData: badWordData,
        whitelistMap: whitelistMap,
    };
};
exports.preprocessWordLists = preprocessWordLists;
//# sourceMappingURL=wordlist_preprocessor.js.map